# NCC Section J Compliance Checker - Full Stack Application

## Project Overview
A comprehensive web application for checking building compliance with the NCC Section J requirements. The application features a modern tech stack with Express.js backend, React frontend, and MongoDB database, implementing JWT authentication for secure access.

## Tech Stack
- **Backend**: Node.js with Express.js
- **Frontend**: React with Redux for state management
- **Database**: MongoDB with Mongoose ODM
- **Authentication**: JWT (JSON Web Tokens)
- **API Documentation**: Swagger/OpenAPI
- **Testing**: Jest for backend, React Testing Library for frontend

## Architecture

### Backend Structure
```
backend/
├── config/                 # Configuration files
│   ├── db.js              # Database connection
│   └── config.js          # App configuration
├── controllers/           # Request handlers
│   ├── authController.js  # Authentication logic
│   ├── projectController.js # Project management
│   └── userController.js  # User management
├── middleware/            # Custom middleware
│   ├── auth.js           # JWT authentication
│   └── errorHandler.js   # Global error handling
├── models/               # Mongoose models
│   ├── Project.js       # Project schema
│   └── User.js          # User schema
├── routes/              # API routes
│   ├── authRoutes.js   # Authentication routes
│   └── projectRoutes.js # Project management routes
├── services/           # Business logic
│   ├── complianceService.js # Compliance checking logic
│   └── reportService.js    # Report generation
├── utils/             # Utility functions
│   ├── decisionTreeUtils.js # Decision tree operations
│   └── mappingUtils.js     # Data mapping utilities
└── data/             # Static data
    └── Decision-Tree.json # Compliance decision tree
```

### Frontend Structure
```
frontend/
├── public/           # Static assets
├── src/
│   ├── components/   # React components
│   │   ├── Auth/    # Authentication components
│   │   ├── Layout/  # Layout components
│   │   └── Project/ # Project management components
│   ├── redux/       # Redux state management
│   │   ├── slices/  # Redux slices
│   │   └── store.js # Redux store configuration
│   ├── services/    # API services
│   └── utils/       # Utility functions
└── package.json     # Frontend dependencies
```

## Key Features

### 1. Authentication System
- JWT-based authentication
- User registration and login
- Password hashing with bcrypt
- Protected routes and API endpoints

### 2. Project Management
- Create, read, update, and delete projects
- Project details and compliance status
- Document upload and management
- Project history tracking

### 3. Compliance Checking
- Automated compliance verification against NCC Section J
- Decision tree-based compliance pathway determination
- Direct climate zone and building classification validation from Decision-Tree.json
- Special requirements identification
- On-demand data access without code changes

### 4. Report Generation
- Comprehensive compliance reports
- PDF export functionality
- Customizable report sections
- Historical report tracking
- Dynamic report generation based on decision tree data

### 5. Data Management
- Centralized decision tree for compliance rules
- Direct access to building classifications and climate zones
- Dynamic data updates
- Data validation and error handling
- Efficient data caching

## API Endpoints

### Authentication
- POST /api/auth/register - User registration
- POST /api/auth/login - User login
- GET /api/auth/me - Get current user

### Projects
- GET /api/projects - List all projects
- POST /api/projects - Create new project
- GET /api/projects/:id - Get project details
- PUT /api/projects/:id - Update project
- DELETE /api/projects/:id - Delete project
- GET /api/projects/:id/report - Generate compliance report

## Data Models

### User Model
```javascript
{
  username: String,
  email: String,
  password: String,
  role: String,
  createdAt: Date
}
```

### Project Model
```javascript
{
  name: String,
  description: String,
  buildingType: String,
  location: String,
  climateZone: String,
  buildingClassification: String,
  compliancePathway: String,
  status: String,
  createdBy: ObjectId,
  updatedAt: Date
}
```

## Decision Tree Implementation
The application uses a centralized Decision-Tree.json file that contains:
- Building classifications and their requirements
- Climate zone mappings and specifications
- Compliance pathways and their criteria
- Special requirements and exemptions
- Direct access to data without intermediate mappings

## Security Features
- JWT token-based authentication
- Password hashing with bcrypt
- Protected API routes
- Input validation and sanitization
- Error handling middleware
- Rate limiting
- CORS configuration

## Performance Optimizations
- MongoDB indexing
- Data caching
- Lazy loading
- Pagination
- Query optimization
- Response compression
- Efficient decision tree data access

## Error Handling
- Global error handling middleware
- Custom error classes
- Validation error handling
- API error responses
- Frontend error boundaries
- Decision tree validation

## Testing Strategy
- Unit tests for utilities and services
- Integration tests for API endpoints
- Frontend component testing
- End-to-end testing
- Performance testing
- Decision tree validation tests

## Deployment
- Environment-based configuration
- Docker containerization
- CI/CD pipeline
- Monitoring and logging
- Backup strategy

## Future Enhancements
1. Real-time compliance updates
2. Advanced reporting features
3. Integration with external systems
4. Mobile application
5. AI-powered compliance suggestions
6. Multi-language support
7. Enhanced data visualization
8. Automated compliance monitoring
9. Decision tree versioning
10. Enhanced decision tree validation 