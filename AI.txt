# NCC Section Compliance Checker Project

## Project Overview
This project is a web application for checking compliance with the National Construction Code (NCC) for building projects. It allows users to create projects, specify building types, locations, and other details, and then generate compliance reports based on the NCC requirements.

## Architecture
- **Frontend**: React with Redux for state management
- **Backend**: Node.js with Express
- **Database**: MongoDB with Mongoose ODM

## Key Components

### Backend
- **Models**:
  - Project: Stores project information including building type, location, climate zone, etc.
  - User: Stores user information for authentication
  - ClimateZone: Stores climate zone information
  - BuildingFabric: Stores building fabric specifications
  - SpecialRequirement: Stores special requirements for buildings
  - CompliancePathway: Stores compliance pathway information

- **Controllers**:
  - projectController.js: Handles project CRUD operations
  - userController.js: Handles user authentication and management
  - buildingClassController.js: Handles building classification operations

- **Services**:
  - reportService.js: Generates compliance reports
  - complianceService.js: Checks compliance with NCC requirements

- **Utils**:
  - decisionTreeUtils.js: Provides functions to access data from Decision-Tree.json
  - locationUtils.js: Provides functions to access location and climate zone data
  - validation.js: Provides validation functions for project data

- **Data Files**:
  - Decision-Tree.json: Contains the decision tree structure for building classifications, climate zones, and compliance pathways
  - locationToClimateZone.json: Maps locations to climate zones
  - buildingTypeToClassification.json: Maps building types to NCC classifications

### Frontend
- **Components**:
  - NewProject.js: Form for creating new projects
  - ProjectList.js: Displays a list of user's projects
  - ProjectDetails.js: Displays details of a specific project
  - ProjectReport.js: Displays a compliance report for a project

- **Redux**:
  - projectSlice.js: Manages project-related state
  - authSlice.js: Manages authentication state

## Recent Changes

### Project Schema Simplification
- Removed the `buildingClassification` field from the Project schema
- Made `buildingFabric`, `specialRequirements`, and `compliancePathway` fields optional
- Updated the `buildingType` field to be a simple string without an enum
- Added proper validation for `buildingType` using the `buildingTypeToClassification.json` file

### Decision Tree Implementation
- Created utility functions in `decisionTreeUtils.js` to access data from `Decision-Tree.json`
- Implemented functions for building classifications, climate zone requirements, compliance pathways, special requirements, and exemptions
- Updated the `ReportService` class to utilize the new utility functions

### Bug Fixes
- Fixed the `createdBy` field in the Project schema by setting it to the same value as the `owner` field in the `createProject` function
- Improved error handling in the `getClimateZoneByLocation` function
- Updated validation messages to be more descriptive

## Current State
- The application allows users to create projects with basic information (name, description, building type, location, floor area)
- Building types are validated against the `buildingTypeToClassification.json` file
- Locations are mapped to climate zones using the `locationToClimateZone.json` file
- The `buildingFabric`, `specialRequirements`, and `compliancePathway` fields are optional and can be added later
- The application can generate compliance reports based on the project information

## Next Steps
- Implement the building fabric section to allow users to specify wall, roof, floor, and window materials and properties
- Implement the special requirements section to allow users to specify fire, accessibility, acoustic, energy, and other requirements
- Implement the compliance pathway section to allow users to specify performance, prescriptive, or deemed-to-satisfy pathways
- Enhance the compliance checking functionality to validate projects against NCC requirements
- Improve the report generation to include more detailed information and recommendations

## Notes
- The `Decision-Tree.json` file is the source of truth for building classifications, climate zones, and compliance pathways
- The `locationToClimateZone.json` file maps locations to climate zones
- The `buildingTypeToClassification.json` file maps building types to NCC classifications
- The `createdBy` field in the Project schema is set to the same value as the `owner` field

## Today's Changes (2024-03-19)

### Building Classification Fixes
- Fixed the building classification display in the project details page
- Updated the `generateBuildingClassificationInfo` method in `reportService.js` to correctly return the classType
- Ensured that the building classification (e.g., "Class_6") is properly displayed in the report

### ReportService Implementation
The `ReportService` class is responsible for generating comprehensive compliance reports for projects. It works as follows:

1. **Initialization**: The service is initialized with a project object and an optional section parameter (defaults to 'full').

2. **Report Generation**: The `generateReport` method orchestrates the report generation process:
   - It starts with basic project information
   - Based on the requested section, it adds specific information:
     - Building classification and climate zone
     - Compliance pathway
     - Building fabric specifications
     - Special requirements
     - Exemptions
     - Section-specific information

3. **Section-Specific Methods**:
   - `generateProjectInfo`: Returns basic project details
   - `generateBuildingClassificationInfo`: Retrieves and formats building classification data
   - `generateClimateZoneInfo`: Gets climate zone information based on location
   - `generateCompliancePathwayInfo`: Determines the appropriate compliance pathway
   - `generateBuildingFabricInfo`: Formats building fabric specifications
   - `generateSpecialRequirementsInfo`: Retrieves special requirements for the building
   - `generateExemptionsInfo`: Checks for applicable exemptions
   - `generateSectionSpecificInfo`: Gets detailed information for a specific NCC section

4. **Data Sources**: The service uses utility functions from `decisionTreeUtils.js` to access data from:
   - `Decision-Tree.json`: Contains the decision tree structure
   - `buildingTypeToClassification.json`: Maps building types to NCC classifications
   - `locationToClimateZone.json`: Maps locations to climate zones

5. **Error Handling**: Each method includes proper error handling to ensure the report generation process is robust.

The report is then displayed in the frontend using the `ProjectReport.js` component, which renders the data in a structured format with appropriate sections and styling. 